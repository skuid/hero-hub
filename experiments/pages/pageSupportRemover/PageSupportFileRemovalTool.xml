<skuid__page unsavedchangeswarning="yes" personalizationmode="server" showsidebar="true" showheader="true" uniqueId="sk-1sBY-861">
	<models>
		<model id="StaticResources" limit="100" query="true" createrowifnonefound="false" datasource="salesforce" sobject="StaticResource" label="Page Support File" labelplural="Page Support Files">
			<fields>
				<field id="Name"/>
				<field id="ContentType"/>
				<field id="Id"/>
				<field id="CreatedDate"/>
				<field id="Description"/>
				<field id="SystemModstamp"/>
				<field id="BodyLength"/>
			</fields>
			<conditions>
				<condition type="fieldvalue" value="skuid_pgsp_" enclosevalueinquotes="true" field="Name" operator="starts with"/>
				<condition type="fieldvalue" value="Skuid Support File" enclosevalueinquotes="true" field="Description" operator="starts with"/>
				<condition type="fieldvalue" value="application/zip" enclosevalueinquotes="true" field="ContentType"/>
			</conditions>
			<actions/>
		</model>
	</models>
	<components>
		<skuid__wrapper uniqueid="sk-1wty-18952">
			<components>
				<skuid__header model="StaticResources" title="Skuid Page Support File Removal Tool" uniqueid="sk-1wtt-18611" separator="true">
					<styles>
						<spacing bottom="2"/>
					</styles>
				</skuid__header>
				<skuid__text contents="Use this tool to find and remove Skuid Page Support Static Resources generated by Skuid in the current org.&lt;br /&gt;&#10;&lt;br /&gt;&#10;Use the &amp;quot;View /inlineresources.js&amp;quot; action to verify that a given file contains the expected Inline JS.&lt;br /&gt;&#10;&lt;br /&gt;&#10;For more information contact your Skuid representative." uniqueid="sk-1wrL-9813">
					<styles>
						<spacing bottom="2"/>
					</styles>
				</skuid__text>
				<skuid__header model="StaticResources" uniqueid="sk-1wxb-11562" subtitle="CAUTION" separator="true">
					<styles>
						<spacing top="4" bottom="2"/>
					</styles>
				</skuid__header>
				<skuid__text contents="This tool uses the &lt;a href=&quot;https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_intro.htm&quot;&gt;Salesforce Metadata API&lt;/a&gt;, which may not be available in all Salesforce editions and may be subject to API usage limits.&lt;br /&gt;&#10;&lt;br /&gt;&#10;This tool attempts to identify Skuid-generated Page Support Files based on the following criteria:&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;The Static Resource Name follows the Skuid convention,&amp;nbsp;beginning with &amp;quot;skuid_pgsp_&amp;quot;&lt;/li&gt;&#10;&#9;&lt;li&gt;The Static Resource Description follows the Skuid convention, beginning with &amp;quot;Skuid Support File&amp;quot;&lt;/li&gt;&#10;&#9;&lt;li&gt;The MIME type of the file is the expected value,&amp;nbsp;&amp;quot;application/zip&amp;quot;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;If standard Page Support files have been modified outside of standard Skuid tools, or files have been added to the org using Skuid&amp;#39;s Page Support File conventions, then this tool may miss some files or may include files that were not generated by Skuid. It is the Admin&amp;#39;s responsibility to verify all actions and ensure that no essential data is lost.&lt;br /&gt;&#10;&lt;br /&gt;&#10;&lt;strong&gt;Files deleted using this tool may not be recoverable.&lt;/strong&gt;" uniqueid="sk-1wxg-11753">
					<styles>
						<spacing bottom="3"/>
					</styles>
				</skuid__text>
				<skuid__table uniqueid="sk-1sBp-2260" model="StaticResources" mode="readonly" title="Page Support Files" styleSettingsVariant="default" pageSize="Infinity" enableDrawers="false" showSaveCancel="false" allowColumnHiding="true" allowColumnOrdering="true" maxHeight="90">
					<fields>
						<field id="Name" uniqueId="sk-1sBy-5889" uniqueid="sk-1sBy-5915"/>
						<field id="Description" uniqueId="sk-1sBy-6021" uniqueid="sk-1sBy-6047"/>
						<field id="ContentType" uniqueId="sk-1sBy-5922" uniqueid="sk-1sBy-5948"/>
						<field id="Id" uniqueId="sk-1sBy-5955" uniqueid="sk-1sBy-5981"/>
						<field id="CreatedDate" uniqueId="sk-1sBy-5988" uniqueid="sk-1sBy-6014"/>
						<field id="SystemModstamp" uniqueId="sk-1sBy-6054" uniqueid="sk-1sBy-6080"/>
						<field id="BodyLength" uniqueId="sk-1sBy-6087" uniqueid="sk-1sBy-6113" horizontalAlignment="right"/>
					</fields>
					<filtering enableSearch="false" instantSearch="false"/>
					<rowActions>
						<action type="multi" label="View /inlineresources.js" uniqueId="sk-1sCL-8012" icon="sk-webicon-ink:pagination">
							<actions>
								<action type="drawer"/>
							</actions>
						</action>
					</rowActions>
					<massActions uniqueId="sk-1sBy-6362">
						<action type="multi" label="Delete Page Support Files" uniqueId="sk-1sMm-2420">
							<actions>
								<action type="blockUI" message="Removing Support Files"/>
								<action type="custom" snippet="Remove Files">
									<onerroractions>
										<action type="blockUI" message="There was an error" timeout="3000"/>
									</onerroractions>
								</action>
								<action type="blockUI" message="Refreshing Support Files Table"/>
								<action type="requeryModels" behavior="standard">
									<models>
										<model>StaticResources</model>
									</models>
								</action>
								<action type="unblockUI"/>
							</actions>
						</action>
					</massActions>
					<drawer uniqueId="sk-1sCW-8465">
						<components>
							<skuid__text uniqueid="sk-1sCa-8478" model="StaticResources" contents="&lt;iframe src=&quot;/resource/1561056773248/{{{Name}}}/inlineresources.js&quot; style=&quot;width: 100%; border:0;&quot;&gt;&lt;/iframe&gt;">
								<conditions/>
								<styleVariantConditions/>
							</skuid__text>
						</components>
					</drawer>
					<actions>
						<action type="multi" label="Load All Page Support Files" uniqueId="sk-1wvs-9027" icon="sk-webicon-ink:download">
							<actions>
								<action type="datasource-action" datasource="salesforce" actionname="loadAllRemainingRecords" modelId="StaticResources"/>
							</actions>
						</action>
					</actions>
				</skuid__table>
			</components>
			<background/>
			<styles>
				<spacing top="2" bottom="2" left="2" right="2"/>
			</styles>
		</skuid__wrapper>
	</components>
	<resources>
		<labels/>
		<javascript>
			<jsitem location="inline" name="Page Support Removal API" cachelocation="false" url="">(function (skuid) {

	var $ = skuid.$,
		utils = skuid.utils,
		platform = skuid.platform,
		pageSupport = skuid.pageSupport || (skuid.pageSupport = {}),

		// Constants used by createStaticResourceDeployment
		XML_DECLARATION = '&lt;?xml version="1.0" encoding="UTF-8"?&gt;',
		XMLNS = ' xmlns="http://soap.sforce.com/2006/04/metadata"',
		XML_TEMPLATE_PACKAGE =
			XML_DECLARATION +
			'&lt;Package' + XMLNS + '&gt;' +
			'&lt;version&gt;46.0&lt;/version&gt;' +
			'&lt;/Package&gt;',
		XML_TEMPLATE_DESTRUCTIVE =
			XML_DECLARATION +
			'&lt;Package' + XMLNS + '&gt;' +
			'&lt;types&gt;' +
			'{{#resources}}&lt;members&gt;{{.}}&lt;/members&gt;{{/resources}}' +
			'&lt;name&gt;StaticResource&lt;/name&gt;' +
			'&lt;/types&gt;' +
			'&lt;version&gt;39.0&lt;/version&gt;' +
			'&lt;/Package&gt;';

	function reportProgressWrapper(progressCallback) {
		if (!utils.isFunction(progressCallback)) return function () { };

		return function (done, message) {
			progressCallback({
				done: done,
				message: message
			});
		};
	}

	/**
	 * Removes Static Resources from the target org by the give array of Names
	 * @param {string[]} staticResourceNames - An array of Static Resource names to be deleted
	 * @param {function} options.progressCallback - If provided, this function will be called at intervals with status
	 * 		messages that can be displayed to the end user.
	 * @returns {Promise}
	 */
	function removeSupportFiles(staticResourceNames, options) {
		options || (options = {});
		var progressCallback = options.progressCallback;
		return createStaticResourceDeployment(staticResourceNames, progressCallback).then(function (zippedDeployment) {
			return deployMetadata(zippedDeployment, progressCallback);
		});
	}

	/**
	 * Builds the Deployment Metadata ZIP file
	 * @param {string[]} resources - An array of Static Resource names to be deleted
	 * @param {*} progressCallback - 
	 */
	function createStaticResourceDeployment(resources, progressCallback) {
		if (!resources || resources.length === 0) return $.when([]).promise();

		var reportProgress = reportProgressWrapper(progressCallback);

		reportProgress(false, 'Building Deployment... ');

		return utils.loadJS(platform.getResourceUrl({
			ns: 'skuid',
			path: 'js/lib/jSZip.js',
		})).then(function () {
			// Libs are ready. Proceed with generating the Support Files
			// Build the request, which is uploaded as a zip package
			var deploymentZip = new skuid.lib.JSZip().folder('src'),
				resolveTemplate = function (template, vars) { return skuid.utils.getMergeResult( "GLOBAL", template, { asText: true, useFieldFormatting: false, apiExtensions: vars } ); },
				// First, build a manifest:
				packageXML = XML_TEMPLATE_PACKAGE,
				destructiveXML = resolveTemplate(XML_TEMPLATE_DESTRUCTIVE, { resources: resources });

			// Add the manifest
			deploymentZip.file('package.xml', packageXML);
			deploymentZip.file('destructiveChanges.xml', destructiveXML);

			reportProgress(false, 'Building Deployment... Compressing');

			return deploymentZip.generate({ type: 'base64', compression: 'DEFLATE' });
		});
	}

	/**
	 * 
	 * @param {JSZip} zippedDeployment - The Deployment Metadata ZIP file to send
	 * @param {*} progressCallback - 
	 */
	function deployMetadata(zippedDeployment, progressCallback) {
		var reportProgress = reportProgressWrapper(progressCallback),
			reportError = function (errorMessage) {
				reportProgress(true, errorMessage);
				dfd.reject(errorMessage);
			},
			dfd = $.Deferred();

		utils.loadJS(platform.getResourceUrl({
			ns: 'skuid',
			path: 'js/lib/jSForce.js',
		})).then(function () {
			var jsforce = window.jsforce,
				connection = new jsforce.Connection({
					sessionId: utils.userInfo.sessionId
				}),
				deployOptions = {
					rollbackOnError: true,
				},
				deploymentId;

			connection.metadata.pollTimeout = 1000;
			connection.metadata.pollTimeout = 30000;

			reportProgress(false, 'Sending Deployment...');

			return connection.metadata.deploy(zippedDeployment, deployOptions, function (errorMessage, deploymentRecord) {
				// This function could be called multiple times, but we only want to kick off the check status loop once
				if (deploymentId) return;
				if (errorMessage) {
					return reportError(errorMessage);
				}
				reportProgress(deploymentRecord.done, 'Processing Deployment... ' + deploymentRecord.state);
				deploymentId = deploymentRecord.id;
				checkDeploymentStatus();
			});

			function checkDeploymentStatus() {
				connection.metadata.checkDeployStatus(deploymentId, true, function (errorMessage, deploymentRecord) {
					if (errorMessage) {
						return reportError(errorMessage);
					}
					reportProgress(deploymentRecord.done,
						'Processing Deployment... ' + (deploymentRecord.state || deploymentRecord.status) +
						(deploymentRecord.status === 'InProgress' ?
							' (t: ' + deploymentRecord.numberComponentsTotal +
							', d: ' + deploymentRecord.numberComponentsDeployed +
							', e: ' + deploymentRecord.numberComponentErrors + ')'
							: '')
					);
					if (!deploymentRecord.done) {
						window.setTimeout(checkDeploymentStatus, 500);
					} else {
						dfd.resolve(deploymentRecord);
					}
				});
			}
		});

		return dfd.promise();
	}

	$.extend(pageSupport, {
		removeSupportFiles,
	});

})(skuid);</jsitem>
			<jsitem location="inlinesnippet" name="Remove Files" cachelocation="false">var names = skuid.$.map(arguments[0].rows, function(row){ return row.Name });

function progressCallback(update){
    skuid.$.blockUI({ message: update.message })
}

return skuid.pageSupport.removeSupportFiles(names, {progressCallback: progressCallback});</jsitem>
		</javascript>
		<css/>
		<actionsequences/>
	</resources>
	<styles>
		<styleitem type="background" bgtype="none"/>
	</styles>
	<pageregioncontents/>
	<background/>
</skuid__page>
